import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:idata2503_group08/model/group.dart';
import 'package:idata2503_group08/model/post.dart';
import 'api_paths.dart';

import '../repository.dart';

class FirestoreRepository implements Repository {
  final FirebaseFirestore instance = FirebaseFirestore.instance;

  @override
  Stream<Iterable<Group>> getGroupsStream({required String orderBy}) =>
      _getCollectionStream(ApiPaths.groups(), orderBy, Group.fromMap);

  @override
  Stream<Iterable<Post>> getPostsStream(String postId, String orderBy) =>
      _getCollectionStream(ApiPaths.posts(postId), orderBy, Post.fromMap);

  @override
  Future addPostWithAutogeneratedId(String collection, Post post) async {
    CollectionReference postsRef = instance.collection(collection);

    DocumentReference<Object?> docRef = await postsRef.add({
      'title': post.title,
      "content": post.content,
      "upvote": post.upVote,
      "downvote": post.downVote,
      "groupTag": post.groupTag,
      "image": post.image,
      "createdAt": post.createdAt,
      "postID": ""
    });
    await docRef.set({
      'title': post.title,
      "content": post.content,
      "upvote": post.upVote,
      "downvote": post.downVote,
      "groupTag": post.groupTag,
      "image": post.image,
      "createdAt": post.createdAt,
      "postID": docRef.id,
    });
    return null;
  }

  @override
  Future addGroupWithAutogeneratedId(Group group) async {
    CollectionReference groupsRef = instance.collection(ApiPaths.groups());

    DocumentReference<Object?> docRef = await groupsRef.add({
      "id": "",
      "name": group.name,
    });
    await docRef.set({
      "id": docRef.id,
      "name": group.name,
    });
    var collection = instance.collection('groups/${docRef.id}/posts');
    collection.add({"id": "posts"});

    return null;
  }

  /// Returns a document at specific path
  Stream<T?> _getDocumentStream<T>(
      String path, T Function(Map<String, dynamic>) converter) {
    print("Get document at $path");

    final Stream<DocumentSnapshot<Map<String, dynamic>>> snapshots =
        instance.doc(path).snapshots();

    return snapshots.map((documentSnapshot) {
      final Map<String, dynamic>? document = documentSnapshot.data();
      return document != null ? converter(document) : null;
    });
  }

  /// Returns a stream from collection at specific path, ordered by name
  Stream<Iterable<T>> _getCollectionStream<T>(
      String path, String orderBy, T Function(Map<String, dynamic>) converter) {
    print("Get collection items at $path");

    final Stream<QuerySnapshot<Map<String, dynamic>>> snapshots = instance
        .collection(path)
        .orderBy(orderBy, descending: true)
        .snapshots();

    return snapshots.map((collectionSnapshot) {
      final List<QueryDocumentSnapshot<Map<String, dynamic>>> documents =
          collectionSnapshot.docs;
      return documents
          .map((QueryDocumentSnapshot<Map<String, dynamic>> document) {
        final Map<String, dynamic> data = document.data();
        return converter(data);
      });
    });
  }
}
