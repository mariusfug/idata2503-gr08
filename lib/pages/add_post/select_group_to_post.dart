import 'package:flutter/material.dart';
import 'package:idata2503_group08/pages/landing_page.dart';
import 'package:idata2503_group08/services/firestore/api_paths.dart';
import 'package:idata2503_group08/widgets/group_selection_card.dart';
import 'package:idata2503_group08/widgets/navigation/bottom_navigation.dart';
import 'package:provider/provider.dart';
import '../../model/group.dart';
import '../../model/post.dart';
import '../../services/repository.dart';
import '../../widgets/navigation/top_navigation.dart';

class SelectGroupToPost extends StatefulWidget {
  const SelectGroupToPost({Key? key, required this.post}) : super(key: key);
  final Post post;

  @override
  State<SelectGroupToPost> createState() => _SelectGroupToPostState();
}

class _SelectGroupToPostState extends State<SelectGroupToPost> {
  Group? selectedGroup;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: TopNavigation(),
      backgroundColor: const Color(0xFF1E1E1E),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.fromLTRB(10, 10, 10, 10),
          child: Card(
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15.0)),
            color: const Color(0xFF2D2D30),
            child: Padding(
              padding: const EdgeInsets.fromLTRB(20, 10, 20, 30),
              child: Stack(
                children: [
                  Column(
                    children: <Widget>[
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          const Flexible(
                              child: Text(
                            "Post to",
                            style: TextStyle(color: Colors.white, fontSize: 24),
                          )),
                          Align(
                            alignment: Alignment.centerRight,
                            child: _buildAddPostButton(context),
                          )
                        ],
                      ),
                      const SizedBox(height: 10),




                      const SizedBox(height: 20),
                      _buildGroupCards(context),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
      bottomNavigationBar: const BottomNavBar(),
    );
  }

  Widget _buildAddPostButton(context) {
    return ElevatedButton(
      onPressed: () => _addPost(context),
      key: const Key("post_next_button"),
      style: ElevatedButton.styleFrom(
        backgroundColor: const Color(0xCC007ACC),
        shape:
            RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
        disabledBackgroundColor: Colors.white24,
        disabledForegroundColor: Colors.white,
      ),
      child: const Text(
        "Add post",
        style: TextStyle(fontSize: 12),
      ),
    );
  }

  /// Add new post, should be called from 'Add post' button only
  void _addPost(BuildContext context) async {
    try {
      widget.post.groupTag = selectedGroup?.name;
      Repository repository = Provider.of<Repository>(context, listen: false);
      repository.addPostWithAutogeneratedId(
          ApiPaths.posts("${selectedGroup?.id}/posts"), widget.post);
      MaterialPageRoute materialPageRoute =
          MaterialPageRoute(builder: (context) => const LandingPage());
      Navigator.of(context).push(materialPageRoute);
    } catch (e) {
      print(e.toString());
    }
  }

  Widget _clickableItem(Group group) {
    return GestureDetector(
      onTap: () {
        setState(() {
          selectedGroup = group;
        });
      },
      child: selectedGroup?.id == group.id
          ? GroupSelectionCard(group, true)
          : GroupSelectionCard(group, false),
    );
  }

  /// Build post cards from all entries in general
  Widget _buildGroupCards(BuildContext context) {
    final Repository repository =
        Provider.of<Repository>(context, listen: false);
    return StreamBuilder<Iterable<Group>?>(
      stream: repository.getGroupsStream(orderBy: "name"),
      builder: (context, snapshot) {
        if (snapshot.connectionState != ConnectionState.active ||
            !snapshot.hasData ||
            snapshot.data == null) {
          return const Text("Loading...");
        }
        final Iterable<Group> groups = snapshot.data!;
        final List<Widget> groupCards =
            groups.map((group) => _clickableItem(group)).toList();

        return Column(children: groupCards);
      },
    );
  }
}
